plugins {
    id "application"
    id "base"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

ext.antlr3Version = '3.5.3'
ext.antlr4Version = '4.9.3' // Newer versions only for Java 11+
ext.asmVersion = '9.5'
ext.baksmaliVersion = '3.0.3'
ext.commonsCompressVersion = '1.23.0'
ext.jUnitVersion = '5.9.3'
ext.jUnitPlatformVersion = '1.9.3'
ext.r8Version = '4.0.63' // Newer versions only for Java 11+

allprojects {
    group = 'com.googlecode.d2j'
    version = '2.1-SNAPSHOT'

    repositories {
        mavenCentral()
        google()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    java {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: '*.jar')
        testImplementation "org.junit.jupiter:junit-jupiter:${project.property('jUnitVersion')}"
        testRuntimeOnly("org.junit.platform:junit-platform-launcher:${project.property('jUnitPlatformVersion')}")
    }

    [compileJava, compileTestJava]*.options.collect { options -> options.encoding = 'UTF-8' }

    test {
        useJUnitPlatform()

        systemProperty 'junit.jupiter.execution.parallel.enabled', true
        systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    }

    // Cache list of tasks
    project.getAllTasks(true)

    publishing {
        publications {
            if (tasks.findByName("shadowJar") == null)
                mavenJava(MavenPublication) {
                    from(components.java)
                }
            else
                mavenJava(MavenPublication) {
                    artifact(tasks.findByName("shadowJar"))
                }
        }
    }

    // Workaround for https://github.com/gradle/gradle/issues/820
    configurations {
        api {
            extendsFrom = extendsFrom.findAll { it != configurations.antlr }
        }
    }
}

application {
    mainClass = "com.googlecode.dex2jar.tools.Dex2jarCmd"
}

base {
    archivesName = "dex2jar"
}

dependencies {
    implementation(project(":d2j-base-cmd")) {
        transitive = false
    }
    implementation(project(":d2j-external")) // Transitive please
    implementation(project(":d2j-jasmin")) {
        transitive = false
    }
    implementation(project(":d2j-smali")) {
        transitive = false
    }
    implementation(project(":dex-ir")) {
        transitive = false
    }
    implementation(project(":dex-reader")) {
        transitive = false
    }
    implementation(project(":dex-reader-api")) {
        transitive = false
    }
    implementation(project(":dex-tools")) {
        transitive = false
    }
    implementation(project(":dex-translator")) {
        transitive = false
    }
    implementation(project(":dex-writer")) {
        transitive = false
    }
}

tasks.jar.enabled = false // Don't build normal jar

shadowJar {
    archiveClassifier.set(null)
}

// Get rid of Gradle warnings
tasks.distTar.dependsOn tasks.shadowJar
tasks.distZip.dependsOn tasks.shadowJar
tasks.startScripts.dependsOn tasks.shadowJar
